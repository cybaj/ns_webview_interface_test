"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var main_view_model_1 = require("./main-view-model");
var dialogs_1 = require("tns-core-modules/ui/dialogs");
var frame_1 = require("tns-core-modules/ui/frame");
var nativescript_webview_interface_1 = require("nativescript-webview-interface");
var page;
var oLangWebViewInterface;
function pageLoaded(args) {
    page = args.object;
    page.bindingContext = main_view_model_1.webViewInterfaceDemoVM;
}
exports.pageLoaded = pageLoaded;
/**
 * Initializing webview only ater page navigation.
 */
function navigatedTo(args) {
    setupWebViewInterface(page);
}
exports.navigatedTo = navigatedTo;
/**
 * Clearing resource attached with webviewInterface on navigated from
 * this page to avoid memory leak.
 */
function navigatedFrom() {
    oLangWebViewInterface.destroy();
}
exports.navigatedFrom = navigatedFrom;
/**
 * Initializes webViewInterface for communication between webview and android/ios
 */
function setupWebViewInterface(page) {
    var webView = page.getViewById('webView');
    oLangWebViewInterface = new nativescript_webview_interface_1.WebViewInterface(webView, '~/www/index.html');
    listenLangWebViewEvents();
}
/**
 * Sends intial list of languages to webView, once it is loaded
 */
function loadLanguagesInWebView() {
    oLangWebViewInterface.emit('loadLanguages', main_view_model_1.webViewInterfaceDemoVM.lstLanguages);
}
/**
 * Handles any event/command emitted by language webview.
 */
function listenLangWebViewEvents() {
    // handles language selectionChange event.
    oLangWebViewInterface.on('languageSelection', function (selectedLanguage) {
        main_view_model_1.webViewInterfaceDemoVM.selectedLanguage = selectedLanguage;
    });
    // loading languages in dropdown, on load of webView content.
    oLangWebViewInterface.on('onload', function () {
        loadLanguagesInWebView();
    });
}
/**
 * Adds language to webView dropdown
 */
function addLanguage() {
    var txtField = page.getViewById('txtLanguage');
    oLangWebViewInterface.callJSFunction('addNewLanguage', [txtField.text]);
}
exports.addLanguage = addLanguage;
/**
 * Fetches currently selected language of dropdown in webView.
 */
function getSelectedLanguage() {
    oLangWebViewInterface.callJSFunction('getSelectedLanguage', null, function (oSelectedLang) {
        dialogs_1.alert("Selected Language is " + oSelectedLang.text);
    });
}
exports.getSelectedLanguage = getSelectedLanguage;
/**
 * Fetches currently selected language of dropdown in webview.
 * The result will come after 2s. This function is written to show the support of deferred result.
 */
function getSelectedLanguageDeferred() {
    oLangWebViewInterface.callJSFunction('getSelectedLanguageDeferred', null, function (oSelectedLang) {
        dialogs_1.alert("Deferred Selected Language is " + oSelectedLang.text);
    });
}
exports.getSelectedLanguageDeferred = getSelectedLanguageDeferred;
/**
 * Navigates to second page.
 */
function goToPage2() {
    frame_1.topmost().navigate('page2');
}
exports.goToPage2 = goToPage2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEscURBQXlEO0FBRXpELHVEQUFrRDtBQUNsRCxtREFBa0Q7QUFDbEQsaUZBQWtFO0FBQ2xFLElBQUksSUFBVSxDQUFDO0FBQ2YsSUFBSSxxQkFBdUMsQ0FBQztBQUU1QyxTQUFnQixVQUFVLENBQUMsSUFBSTtJQUMzQixJQUFJLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN6QixJQUFJLENBQUMsY0FBYyxHQUFHLHdDQUFzQixDQUFDO0FBQ2pELENBQUM7QUFIRCxnQ0FHQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0IsV0FBVyxDQUFDLElBQUk7SUFDNUIscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQUZELGtDQUVDO0FBRUQ7OztHQUdHO0FBQ0gsU0FBZ0IsYUFBYTtJQUN4QixxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNyQyxDQUFDO0FBRkQsc0NBRUM7QUFFRDs7R0FFRztBQUNILFNBQVMscUJBQXFCLENBQUMsSUFBVTtJQUNyQyxJQUFJLE9BQU8sR0FBWSxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ25ELHFCQUFxQixHQUFHLElBQUksaURBQWdCLENBQUMsT0FBTyxFQUFFLGtCQUFrQixDQUFDLENBQUM7SUFDMUUsdUJBQXVCLEVBQUUsQ0FBQztBQUM5QixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxTQUFTLHNCQUFzQjtJQUMzQixxQkFBcUIsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLHdDQUFzQixDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3JGLENBQUM7QUFFRDs7R0FFRztBQUNILFNBQVMsdUJBQXVCO0lBQzVCLDBDQUEwQztJQUMxQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsVUFBQyxnQkFBZ0I7UUFDM0Qsd0NBQXNCLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7SUFDL0QsQ0FBQyxDQUFDLENBQUM7SUFFSCw2REFBNkQ7SUFDN0QscUJBQXFCLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRTtRQUMvQixzQkFBc0IsRUFBRSxDQUFDO0lBQzdCLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0IsV0FBVztJQUN2QixJQUFJLFFBQVEsR0FBYyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzFELHFCQUFxQixDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzVFLENBQUM7QUFIRCxrQ0FHQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0IsbUJBQW1CO0lBQ2hDLHFCQUFxQixDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsVUFBQyxhQUFhO1FBQzNFLGVBQUssQ0FBQywwQkFBd0IsYUFBYSxDQUFDLElBQU0sQ0FBQyxDQUFDO0lBQ3hELENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUpELGtEQUlDO0FBRUQ7OztHQUdHO0FBQ0gsU0FBZ0IsMkJBQTJCO0lBQ3hDLHFCQUFxQixDQUFDLGNBQWMsQ0FBQyw2QkFBNkIsRUFBRSxJQUFJLEVBQUUsVUFBQyxhQUFhO1FBQ25GLGVBQUssQ0FBQyxtQ0FBaUMsYUFBYSxDQUFDLElBQU0sQ0FBQyxDQUFDO0lBQ2pFLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUpELGtFQUlDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixTQUFTO0lBQ3JCLGVBQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNoQyxDQUFDO0FBRkQsOEJBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1BhZ2V9IGZyb20gJ3Rucy1jb3JlLW1vZHVsZXMvdWkvcGFnZSc7XG5pbXBvcnQge1dlYlZpZXcsIExvYWRFdmVudERhdGF9IGZyb20gJ3Rucy1jb3JlLW1vZHVsZXMvL3VpL3dlYi12aWV3JztcbmltcG9ydCB7d2ViVmlld0ludGVyZmFjZURlbW9WTX0gZnJvbSAnLi9tYWluLXZpZXctbW9kZWwnO1xuaW1wb3J0IHtUZXh0RmllbGR9IGZyb20gJ3Rucy1jb3JlLW1vZHVsZXMvdWkvdGV4dC1maWVsZCc7XG5pbXBvcnQge2FsZXJ0fSBmcm9tICd0bnMtY29yZS1tb2R1bGVzL3VpL2RpYWxvZ3MnO1xuaW1wb3J0IHt0b3Btb3N0fSBmcm9tICd0bnMtY29yZS1tb2R1bGVzL3VpL2ZyYW1lJztcbmltcG9ydCB7IFdlYlZpZXdJbnRlcmZhY2UgfSBmcm9tICduYXRpdmVzY3JpcHQtd2Vidmlldy1pbnRlcmZhY2UnO1xudmFyIHBhZ2U6IFBhZ2U7XG52YXIgb0xhbmdXZWJWaWV3SW50ZXJmYWNlOiBXZWJWaWV3SW50ZXJmYWNlO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFnZUxvYWRlZChhcmdzKXtcbiAgICBwYWdlID0gPFBhZ2U+YXJncy5vYmplY3Q7XG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IHdlYlZpZXdJbnRlcmZhY2VEZW1vVk07XG59XG5cbi8qKlxuICogSW5pdGlhbGl6aW5nIHdlYnZpZXcgb25seSBhdGVyIHBhZ2UgbmF2aWdhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5hdmlnYXRlZFRvKGFyZ3Mpe1xuICAgIHNldHVwV2ViVmlld0ludGVyZmFjZShwYWdlKTsgXG59XG5cbi8qKlxuICogQ2xlYXJpbmcgcmVzb3VyY2UgYXR0YWNoZWQgd2l0aCB3ZWJ2aWV3SW50ZXJmYWNlIG9uIG5hdmlnYXRlZCBmcm9tIFxuICogdGhpcyBwYWdlIHRvIGF2b2lkIG1lbW9yeSBsZWFrLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbmF2aWdhdGVkRnJvbSgpe1xuICAgICBvTGFuZ1dlYlZpZXdJbnRlcmZhY2UuZGVzdHJveSgpOyBcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyB3ZWJWaWV3SW50ZXJmYWNlIGZvciBjb21tdW5pY2F0aW9uIGJldHdlZW4gd2VidmlldyBhbmQgYW5kcm9pZC9pb3NcbiAqL1xuZnVuY3Rpb24gc2V0dXBXZWJWaWV3SW50ZXJmYWNlKHBhZ2U6IFBhZ2Upe1xuICAgIHZhciB3ZWJWaWV3ID0gPFdlYlZpZXc+cGFnZS5nZXRWaWV3QnlJZCgnd2ViVmlldycpO1xuICAgIG9MYW5nV2ViVmlld0ludGVyZmFjZSA9IG5ldyBXZWJWaWV3SW50ZXJmYWNlKHdlYlZpZXcsICd+L3d3dy9pbmRleC5odG1sJyk7XG4gICAgbGlzdGVuTGFuZ1dlYlZpZXdFdmVudHMoKTtcbn1cblxuLyoqXG4gKiBTZW5kcyBpbnRpYWwgbGlzdCBvZiBsYW5ndWFnZXMgdG8gd2ViVmlldywgb25jZSBpdCBpcyBsb2FkZWQgXG4gKi9cbmZ1bmN0aW9uIGxvYWRMYW5ndWFnZXNJbldlYlZpZXcoKXtcbiAgICBvTGFuZ1dlYlZpZXdJbnRlcmZhY2UuZW1pdCgnbG9hZExhbmd1YWdlcycsIHdlYlZpZXdJbnRlcmZhY2VEZW1vVk0ubHN0TGFuZ3VhZ2VzKTtcbn1cblxuLyoqXG4gKiBIYW5kbGVzIGFueSBldmVudC9jb21tYW5kIGVtaXR0ZWQgYnkgbGFuZ3VhZ2Ugd2Vidmlldy5cbiAqL1xuZnVuY3Rpb24gbGlzdGVuTGFuZ1dlYlZpZXdFdmVudHMoKXsgIFxuICAgIC8vIGhhbmRsZXMgbGFuZ3VhZ2Ugc2VsZWN0aW9uQ2hhbmdlIGV2ZW50LlxuICAgIG9MYW5nV2ViVmlld0ludGVyZmFjZS5vbignbGFuZ3VhZ2VTZWxlY3Rpb24nLCAoc2VsZWN0ZWRMYW5ndWFnZSkgPT4ge1xuICAgICAgICB3ZWJWaWV3SW50ZXJmYWNlRGVtb1ZNLnNlbGVjdGVkTGFuZ3VhZ2UgPSBzZWxlY3RlZExhbmd1YWdlO1xuICAgIH0pO1xuXG4gICAgLy8gbG9hZGluZyBsYW5ndWFnZXMgaW4gZHJvcGRvd24sIG9uIGxvYWQgb2Ygd2ViVmlldyBjb250ZW50LlxuICAgIG9MYW5nV2ViVmlld0ludGVyZmFjZS5vbignb25sb2FkJywgKCkgPT4ge1xuICAgICAgICBsb2FkTGFuZ3VhZ2VzSW5XZWJWaWV3KCk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogQWRkcyBsYW5ndWFnZSB0byB3ZWJWaWV3IGRyb3Bkb3duXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRMYW5ndWFnZSgpe1xuICAgIHZhciB0eHRGaWVsZCA9IDxUZXh0RmllbGQ+cGFnZS5nZXRWaWV3QnlJZCgndHh0TGFuZ3VhZ2UnKTtcbiAgICBvTGFuZ1dlYlZpZXdJbnRlcmZhY2UuY2FsbEpTRnVuY3Rpb24oJ2FkZE5ld0xhbmd1YWdlJywgW3R4dEZpZWxkLnRleHRdKTtcbn1cblxuLyoqXG4gKiBGZXRjaGVzIGN1cnJlbnRseSBzZWxlY3RlZCBsYW5ndWFnZSBvZiBkcm9wZG93biBpbiB3ZWJWaWV3LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VsZWN0ZWRMYW5ndWFnZSgpe1xuICAgb0xhbmdXZWJWaWV3SW50ZXJmYWNlLmNhbGxKU0Z1bmN0aW9uKCdnZXRTZWxlY3RlZExhbmd1YWdlJywgbnVsbCwgKG9TZWxlY3RlZExhbmcpID0+IHtcbiAgICAgICAgYWxlcnQoYFNlbGVjdGVkIExhbmd1YWdlIGlzICR7b1NlbGVjdGVkTGFuZy50ZXh0fWApO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIEZldGNoZXMgY3VycmVudGx5IHNlbGVjdGVkIGxhbmd1YWdlIG9mIGRyb3Bkb3duIGluIHdlYnZpZXcuXG4gKiBUaGUgcmVzdWx0IHdpbGwgY29tZSBhZnRlciAycy4gVGhpcyBmdW5jdGlvbiBpcyB3cml0dGVuIHRvIHNob3cgdGhlIHN1cHBvcnQgb2YgZGVmZXJyZWQgcmVzdWx0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VsZWN0ZWRMYW5ndWFnZURlZmVycmVkKCl7XG4gICBvTGFuZ1dlYlZpZXdJbnRlcmZhY2UuY2FsbEpTRnVuY3Rpb24oJ2dldFNlbGVjdGVkTGFuZ3VhZ2VEZWZlcnJlZCcsIG51bGwsIChvU2VsZWN0ZWRMYW5nKSA9PiB7XG4gICAgICAgIGFsZXJ0KGBEZWZlcnJlZCBTZWxlY3RlZCBMYW5ndWFnZSBpcyAke29TZWxlY3RlZExhbmcudGV4dH1gKTtcbiAgICB9KTsgICAgIFxufVxuXG4vKipcbiAqIE5hdmlnYXRlcyB0byBzZWNvbmQgcGFnZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdvVG9QYWdlMigpe1xuICAgIHRvcG1vc3QoKS5uYXZpZ2F0ZSgncGFnZTInKTtcbn0iXX0=